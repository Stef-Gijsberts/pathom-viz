{:config-paths []
 :lint-as      {clojure.test.check.clojure-test/defspec  clojure.core/def
                clojure.test.check.properties/for-all    clojure.core/let
                promesa.core/let                         clojure.core/let
                promesa.core/loop                        clojure.core/loop
                com.fulcrologic.guardrails.core/>def     clojure.spec.alpha/def
                com.fulcrologic.guardrails.core/>defn    clojure.core/defn
                com.fulcrologic.fulcro.components/defsc  clojure.core/defn
                helix.core/defnc                         clojure.core/defn
                com.wsscode.pathom.viz.embed.macros/defc clojure.core/defn
                potemkin.collections/def-map-type        clojure.core/deftype
                com.wsscode.promesa.macros/clet          clojure.core/let}
 :linters      {:unsorted-required-namespaces {:level :warning}
                :invalid-arity                {:level :error}
                :missing-else-branch          {:level :off}
                :unresolved-symbol            {:exclude [match? thrown-match?]}
                :consistent-alias             {:level   :warning
                                               :aliases {com.wsscode.async.processing  wap
                                                         clojure.test.check.generators gen
                                                         clojure.test.check.properties prop}}
                :unused-namespace             {:level   :warning
                                               :exclude [com.fulcrologic.guardrails.core
                                                         com.wsscode.async.async-clj
                                                         com.wsscode.async.async-cljs
                                                         promesa.core]}
                :unused-referred-var          {:level   :warning
                                               :exclude {com.wsscode.async.async-clj     [let-chan let-chan*
                                                                                          go go-catch go-promise
                                                                                          <! <? <?maybe <!maybe <!!]
                                                         com.wsscode.async.async-cljs    [let-chan let-chan* <!p
                                                                                          go go-catch go-promise
                                                                                          <! <? <?maybe <!maybe]
                                                         com.fulcrologic.guardrails.core [>def >defn >fdef => | <- ?]
                                                         clojure.test                    [deftest is are run-tests testing]
                                                         cljs.test                       [deftest is are run-tests testing]}}}}
